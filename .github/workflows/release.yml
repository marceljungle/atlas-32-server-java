name: Release

on:
  push:
    branches: [ main ]

# Define permissions for the GITHUB_TOKEN for all jobs in this workflow
permissions:
  contents: write       # Needed for checkout, pushing commits/tags (update_pom_and_tag), creating releases (publish_github_release)
  pull-requests: read   # Needed for release-drafter to read PR labels and details
  packages: write       # Needed for build_image job to push to Docker Hub/GHCR

jobs:
  # ────────────────── 1  DETERMINE VERSION & DRAFT NOTES ───────────────────
  draft_release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.release_drafter.outputs.tag_name }} # e.g., v1.2.3
      release_name: ${{ steps.release_drafter.outputs.name }}   # e.g., v1.2.3
      body: ${{ steps.release_drafter.outputs.body }}       # Generated release notes
      version: ${{ steps.versioner.outputs.version }}      # e.g., 1.2.3 (without 'v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for release-drafter to compare tags

      # Run release-drafter to calculate the next version and generate notes
      # It uses the configuration from .github/release-drafter.yml
      - name: Draft next release notes and version
        id: release_drafter
        uses: release-drafter/release-drafter@v6
        env:
          # GITHUB_TOKEN implicitly uses the permissions defined at the workflow level
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Debug release_drafter outputs
        run: |
          echo "tag_name output: >>>${{ steps.release_drafter.outputs.tag_name }}<<<"
          echo "name output: >>>${{ steps.release_drafter.outputs.name }}<<<"
          echo "body output: >>>${{ steps.release_drafter.outputs.body }}<<<"
          echo "outputs context: ${{ toJSON(steps.release_drafter.outputs) }}"

      # Extract the version number without the 'v' prefix for Maven
      - name: Extract version number
        id: versioner
        run: |
          # Get the tag name from the previous step's output
          TAG_NAME="${{ steps.release_drafter.outputs.tag_name }}"

          # Add check to ensure tag_name is not empty before processing
          if [ -z "$TAG_NAME" ]; then
            echo "Error: Release Drafter did not produce a tag name. Is there an initial tag/release (e.g., v0.1.0)?"
            # Exit with error code 1 to fail the job explicitly
            exit 1
          fi

          # Remove 'v' prefix
          VERSION=$(echo "$TAG_NAME" | sed 's/^v//')

          # Set the output for subsequent steps
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          # Log the results for debugging
          echo "Calculated version: $VERSION"
          echo "Calculated tag: $TAG_NAME"

  # ────────────────── 2  UPDATE POM, COMMIT & TAG ──────────────────────────
  update_pom_and_tag:
    needs: draft_release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.draft_release.outputs.version }} # Pass clean version to next job
      tag_name: ${{ needs.draft_release.outputs.tag_name }} # Pass tag to next job
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # We need the token to push commits and tags
          token: ${{ secrets.GITHUB_TOKEN }} # Inherits permissions from workflow level

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: 'maven' # Optional: cache Maven dependencies

      - name: Update Maven version to ${{ needs.draft_release.outputs.version }}
        run: |
          echo "Setting Maven version to: ${{ needs.draft_release.outputs.version }}"
          # Use 'mvn' directly as the wrapper is not present
          # Check if version is non-empty before running mvn
          VERSION_TO_SET="${{ needs.draft_release.outputs.version }}"
          if [ -z "$VERSION_TO_SET" ]; then
            echo "Error: Version from previous step is empty."
            exit 1
          fi
          mvn -B -ntp versions:set -DnewVersion=$VERSION_TO_SET versions:commit

      - name: Commit and Tag release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Commit changes in pom.xml files
          git commit -am "chore(release): prepare release ${{ needs.draft_release.outputs.tag_name }}" || echo "No changes to commit in pom.xml"
          echo "Creating tag: ${{ needs.draft_release.outputs.tag_name }}"
          git tag ${{ needs.draft_release.outputs.tag_name }}
          echo "Pushing changes and tag..."
          # Push the commit and the created tag
          git push origin main --follow-tags

  # ────────────────────────────── 3  BUILD IMAGE ────────────────────────────
  build_image:
    needs: [draft_release, update_pom_and_tag] # Needs version and tag
    runs-on: ubuntu-latest
    # permissions block at job level is overridden by workflow level, but kept here for clarity if needed elsewhere
    permissions:
      contents: read
      packages: write # Permission to write to Docker Hub or GHCR (granted at workflow level)
    steps:
      # Checkout the specific commit where the POM was updated and the tag was created
      - name: Checkout repository at tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.update_pom_and_tag.outputs.tag_name }} # Checkout the tag created in the previous job

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: 'maven'

      # Define image name using the version from the previous job
      - name: Define Image Name
        id: img_name
        run: |
          echo "image_name=${{ secrets.DOCKER_USER }}/atlas-32-server:${{ needs.update_pom_and_tag.outputs.version }}" >> $GITHUB_OUTPUT

      - name: Build OCI image with Spring Boot Buildpacks
        run: |
          echo "Building image: ${{ steps.img_name.outputs.image_name }}"
          # Use 'mvn' directly. Ensure module path (-pl) is correct for your project structure.
          mvn -B -ntp -pl atlas-32-boot -am -DskipTests \
                 spring-boot:build-image \
                 -Dspring-boot.build-image.imageName=${{ steps.img_name.outputs.image_name }} \
                 -Dspring-boot.build-image.builder=docker.io/paketobuildpacks/builder-jammy-base:latest \
                 -Dspring-boot.build-image.platform=linux/amd64,linux/arm64 # Optional: for multi-arch builds

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image to Docker Hub
        run: |
          echo "Pushing image: ${{ steps.img_name.outputs.image_name }}"
          docker push ${{ steps.img_name.outputs.image_name }}

  # ────────────────────────── 4  PUBLISH GITHUB RELEASE ─────────────────────
  publish_github_release:
    needs: [draft_release, update_pom_and_tag, build_image] # Depends on all previous jobs succeeding
    runs-on: ubuntu-latest
    # permissions block at job level is overridden by workflow level
    permissions:
      contents: write # Required to publish/update the release (granted at workflow level)
    steps:
      # Use ncipollo/release-action to publish the final release
      # It will use the tag created and the notes generated by release-drafter
      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1
        with:
          # token implicitly uses workflow token with granted permissions
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.draft_release.outputs.tag_name }}
          name: ${{ needs.draft_release.outputs.release_name }}
          body: ${{ needs.draft_release.outputs.body }}
          draft: false # Ensure it's published (not a draft)
          prerelease: false # Ensure it's not a pre-release