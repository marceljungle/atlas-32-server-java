name: Release

on:
  push:
    branches: [ main ]

# Define permissions for the GITHUB_TOKEN for all jobs in this workflow
permissions:
  contents: write       # Needed for checkout, pushing commits/tags (update_pom_and_tag), creating releases (publish_github_release)
  pull-requests: read   # Needed for release-drafter to read PR labels and details
  packages: write       # Needed for build_image job to push to Docker Hub/GHCR

jobs:
  # ────────────────── 1  DETERMINE VERSION & DRAFT NOTES ───────────────────
  draft_release:
    runs-on: ubuntu-latest
    outputs:
      # Pass the body and the resolved version (ignore tag_name and name from here)
      body: ${{ steps.release_drafter.outputs.body }}
      resolved_version: ${{ steps.release_drafter.outputs.resolved_version }} # Use this output which IS correct
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for release-drafter to compare tags

      - name: Draft next release notes and version
        id: release_drafter
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # (Optional) Keep debug step for verification if needed
      - name: Debug release_drafter outputs
        if: always() # Run even if previous steps fail (for debugging)
        run: |
          echo "Resolved Version output: >>>${{ steps.release_drafter.outputs.resolved_version }}<<<"
          echo "Tag Name output (potentially wrong): >>>${{ steps.release_drafter.outputs.tag_name }}<<<"

  # ────────────────── 1.5 EXTRACT & CONSTRUCT VERSION/TAG ─────────────────
  # New intermediate job to construct the correct tag
  extract_and_construct_version:
    runs-on: ubuntu-latest
    needs: draft_release # Needs the resolved_version
    outputs:
      version: ${{ steps.versioner.outputs.version }}      # e.g., 0.2.0 (without v)
      tag_name: ${{ steps.versioner.outputs.tag_name }}    # e.g., v0.2.0 (with v)
      release_name: ${{ steps.versioner.outputs.tag_name }} # Use the constructed tag as name
      body: ${{ needs.draft_release.outputs.body }}        # Pass the body (might still contain v$NEXT_VERSION)
    steps:
      - name: Construct version and tag from resolved_version
        id: versioner
        run: |
          RESOLVED_VERSION="${{ needs.draft_release.outputs.resolved_version }}"
          echo "Received resolved_version: $RESOLVED_VERSION"

          if [ -z "$RESOLVED_VERSION" ]; then
            echo "Error: Release Drafter did not produce a resolved_version."
            exit 1
          fi

          # Construct the tag_name by adding 'v'
          TAG_NAME="v$RESOLVED_VERSION"

          # Set outputs
          # version is without 'v' for Maven
          echo "version=$RESOLVED_VERSION" >> "$GITHUB_OUTPUT"
          # tag_name includes 'v' for Git/GitHub Release
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

          echo "Constructed version: $RESOLVED_VERSION"
          echo "Constructed tag_name: $TAG_NAME"

  # ────────────────── 2  UPDATE POM, COMMIT & TAG ──────────────────────────
  update_pom_and_tag:
    # Depends on the job that constructs the correct version/tag
    needs: extract_and_construct_version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.extract_and_construct_version.outputs.version }}
      tag_name: ${{ needs.extract_and_construct_version.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # We need the token to push commits and tags

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: 'maven' # Optional: cache Maven dependencies

      # Use the version (without v) from the previous job
      - name: Update Maven version to ${{ needs.extract_and_construct_version.outputs.version }}
        run: |
          echo "Setting Maven version to: ${{ needs.extract_and_construct_version.outputs.version }}"
          VERSION_TO_SET="${{ needs.extract_and_construct_version.outputs.version }}"
          if [ -z "$VERSION_TO_SET" ]; then
            echo "Error: Version from previous step is empty."
            exit 1
          fi
          # Use 'mvn' directly as the wrapper is not present
          mvn -B -ntp versions:set -DnewVersion=$VERSION_TO_SET versions:commit
          # -B batch mode, -ntp no transfer progress

      # Use the tag_name (with v) from the previous job
      - name: Commit and Tag release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          # Commit changes in pom.xml files
          git commit -am "chore(release): prepare release ${{ needs.extract_and_construct_version.outputs.tag_name }}" || echo "No changes to commit in pom.xml"
          echo "Creating tag: ${{ needs.extract_and_construct_version.outputs.tag_name }}"
          git tag ${{ needs.extract_and_construct_version.outputs.tag_name }}
          echo "Pushing changes..."
          # Push the commit first
          git push origin main
          echo "Pushing tags..."
          # Explicitly push tags afterwards
          git push origin --tags

  # ──────────────── 3  BUILD & PUSH IMAGE PER ARCH ────────────────
  build_image:
    needs: [ extract_and_construct_version, update_pom_and_tag ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ amd64, arm64 ]

    steps:
      - name: Checkout at tag
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.update_pom_and_tag.outputs.tag_name }}
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: 'maven'

      - name: Build modules
        run: mvn -B -ntp install -DskipTests

      - name: Build & push ${{ matrix.arch }} image
        env:
          IMAGE_BASE: ${{ secrets.DOCKER_USER }}/atlas-32-server
          VERSION: ${{ needs.update_pom_and_tag.outputs.version }}
          BUILDER: paketobuildpacks/builder-jammy-java-tiny   # multi‑arch
        run: |
          FULL_TAG=${IMAGE_BASE}:${VERSION}-${{ matrix.arch }}
          mvn -B -ntp -pl atlas-32-boot \
              -DskipTests \
              spring-boot:build-image \
              -Dspring-boot.build-image.builder=${BUILDER} \
              -Dspring-boot.build-image.imagePlatform=linux/${{ matrix.arch }} \
              -Dspring-boot.build-image.imageName=${FULL_TAG}
          docker push ${FULL_TAG}

  # ──────────────── 3.1  CREATE MANIFEST ────────────────
  create_manifest:
    needs: build_image
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push multi‑arch manifest
        env:
          IMAGE_BASE: ${{ secrets.DOCKER_USER }}/atlas-32-server
          VERSION: ${{ needs.update_pom_and_tag.outputs.version }}
        run: |
          docker manifest create ${IMAGE_BASE}:${VERSION} \
            --amend ${IMAGE_BASE}:${VERSION}-amd64 \
            --amend ${IMAGE_BASE}:${VERSION}-arm64
          docker manifest push ${IMAGE_BASE}:${VERSION}

  # ────────────────────────── 4  PUBLISH GITHUB RELEASE ─────────────────────
  publish_github_release:
    # Depends on the job that constructs the correct version/tag and the image build
    needs: [extract_and_construct_version, update_pom_and_tag, build_image]
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to publish/update the release
    steps:
      - name: Publish GitHub Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Use the correctly constructed tag and name
          tag: ${{ needs.extract_and_construct_version.outputs.tag_name }}
          name: ${{ needs.extract_and_construct_version.outputs.release_name }}
          # The body might still contain the unresolved v$NEXT_VERSION.
          # We could fix it here with sed if important, or leave it as is.
          body: ${{ needs.extract_and_construct_version.outputs.body }}
          draft: false # Ensure it's published (not a draft)
          prerelease: false # Ensure it's not a pre-release
          # generateReleaseNotes: false # We already have notes from release-drafter
